name: Package

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta'

jobs:
  package:
    runs-on: macos-latest
    env:
      EP_GH_IGNORE_TIME: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APPLE_CERT_ID: ${{ secrets.APPLE_CERT_ID }}
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_CONNECT_JWT: ${{ secrets.APPLE_CONNECT_JWT }}
      APPLE_CERT_B64: ${{ secrets.APPLE_CERT_B64 }}
      APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
      APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
      WIN_CODE_SIGNING_B64: ${{ secrets.SIA_CENTRAL_CODE_SIGNING }}
      WIN_CSC_KEY_PASSWORD: ${{ secrets.SIA_CENTRAL_CODE_SIGNING_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '~1.17.0'
      - run: yarn
      - run: yarn run lint
      - name: setup
        run: |
          # extract apple cert
          APPLE_CERT_PATH=$RUNNER_TEMP/apple_cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$APPLE_CERT_B64" | base64 --decode --output $APPLE_CERT_PATH

          # extract itunes connect JWT
          mkdir -p ~/private_keys
          APPLE_CONNECT_JWT_PATH=~/private_keys/AuthKey_$APPLE_API_KEY.p8
          echo -n "$APPLE_CONNECT_JWT" | base64 --decode --output $APPLE_CONNECT_JWT_PATH

          # extract windows cert
          WIN_CSC_LINK=$RUNNER_TEMP/win_cert.p12
          echo -n "$WIN_CODE_SIGNING_B64" | base64 --decode --output $WIN_CSC_LINK
          echo "WIN_CSC_LINK=$WIN_CSC_LINK" >> .env.local
          echo "WIN_CSC_KEY_PASSWORD=$WIN_CSC_KEY_PASSWORD" >> .env.local

          # create temp keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import keychain
          security import $APPLE_CERT_PATH -P $APPLE_CERT_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $APPLE_KEYCHAIN_PASSWORD $KEYCHAIN_PATH
      - name: build
        run: |
          # build sia
          mkdir -p build/bin/linux build/bin/mac build/bin/win
          export SIA_VERSION=v$(jq -r .siaVersion package.json)
          export wd=$PWD

          git clone https://github.com/siafoundation/siad build/bin/tmp/sia
          cd build/bin/tmp/sia
          git checkout $SIA_VERSION
          for os in darwin linux windows; do
            for arch in amd64 arm64; do
              diros=$os
              dirarch=$arch
              # electron expects "mac", go expects "darwin"
              if [ $os == 'darwin' ]; then
                diros="mac"
              elif [ $os == 'windows' ]; then
                diros="win"
              fi

              # electron expectrs "x64", go expects "amd64"
              if [ $arch == 'amd64' ]; then
                dirarch="x64"
              fi
              mkdir -p $wd/build/bin/$diros/$dirarch
              GOOS=$os GOARCH=$arch make static
              cp release/* $wd/build/bin/$diros/$dirarch && rm -rf release
            done
          done

          # package
          cd $wd
          yarn run publish --win --linux --mac --x64 --arm64
      - name: publish changelog
        uses: actions/github-script@v4
        with:
          script: |
            // extract the repo and tag
            const { repo: githubRepo, ref } = context,
              { owner, repo } = githubRepo,
              tag = ref.replace('refs/tags/', '').trim(),
              { data } = await github.repos.getReleaseByTag({
                owner, repo, tag
              }),
              { name, id: release_id } = data,
              // read the changelog
              logLines = require('fs').readFileSync('CHANGELOG.md').toString('utf-8').split('\n');

            // find matching release in the changelog
            let body = [], found;
            for (let i = 0; i < logLines.length; i++) {
              const line = logLines[i];
              // if this line matches the target release header, start collecting lines
              if (line.indexOf(`# ${name}`) === 0) {
                found = true;
                continue;
              }

              // if the release hasn't been seen yet, skip
              if (!found)
                continue;
              // if the line matches the next release header, stop
              else if (/^# [0-9]+\.[0-9]+\.[0-9]+/.test(line)) {
                body = body.join('\n').trim();
                break;
              }

              // otherwise, add the line to the body
              body.push(line);
            }

            // if we didn't find the body, throw an error
            if (!body.length)
              throw new Error(`could not find release body for ${name}`);

            // update the release
            await github.repos.updateRelease({
              owner, repo, body, release_id
            });
      - name: cleanup
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf .env* build/bin $RUNNER_TEMP/* ~/private_keys 2> /dev/null


